{"version":3,"sources":["SelectionBox.js","LockScreen.js","App.js","serviceWorker.js","index.js"],"names":["SelectionBox","_Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","handleChange","event","props","onChange","target","value","inherits","createClass","key","react_default","a","createElement","className","labels","map","label","toString","Component","LockComponent","state","passwordIncorrect","password","validatePassword","console","log","setState","handlePasswordChange","type","placeholder","onClick","LockScreen","_Component2","LockScreen_LockComponent","request","require","SendingPassword","sendingCompleted","PasswordSelection","SelectionBox_SelectionBox","labelSelected","sendToKeyboard","SelectionScreen","CurrentState","SendingToKeyboard","SentToKeyboard","DoingNothing","currentState","error","response","body","statusCode","setTimeout","handleLabelSelectedChange","App_PasswordSelection","App_SendingPassword","handleGeneratePasswordClick","App","locked","updateLabels","isArray","JSON","parse","_this2","lockScreen","LockScreen_LockScreen","App_SelectionScreen","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.64f3b778.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nexport class SelectionBox extends Component {\n    handleChange = (event) => {\n        this.props.onChange(event.target.value)\n    };\n\n    render() {\n        return (\n            <div>\n                <select className=\"form-control\" onChange={this.handleChange} value={this.props.value}>\n                    {\n                        this.props.labels.map((label) =>\n                            <option key={label.toString()}>\n                                {label}\n                            </option>\n                    )}\n                </select>\n            </div>\n        );\n    }\n}\n","import React, { Component } from 'react';\n\nclass LockComponent extends Component {\n    state = {\n        passwordIncorrect: false,\n        password: \"\"\n    };\n\n    validatePassword = () => {\n        // this.props.validate();\n        console.log(this.state.password);\n        this.setState({passwordIncorrect: true})\n    };\n\n    handlePasswordChange = (event) => {\n        this.setState({password: event.target.value, passwordIncorrect: false})\n    };\n\n    render() {\n        return (\n            <div>\n                <form>\n                    <div className={\"form-group \" + this.state.passwordIncorrect ? \"was-validated\" : \"\"}>\n                        <input type=\"password\" className=\"form-control\" onChange={this.handlePasswordChange} value={this.state.password} placeholder=\"Password\"/>\n                    </div>\n                </form>\n                <button type=\"submit\" onClick={this.validatePassword} className=\"btn btn-primary\">Submit</button>\n            </div>\n        );\n    }\n}\n\nexport class LockScreen extends Component {\n    render() {\n        return (\n            <div>\n                Please unlock the password manager.\n                <br/><br/>\n                <LockComponent/>\n            </div>\n        );\n    }\n}","import React, { Component } from 'react';\nimport {SelectionBox} from './SelectionBox';\nimport {LockScreen} from './LockScreen';\nimport './App.css';\n\nconst request = require('request');\n\nclass SendingPassword extends Component {\n    render() {\n        return (\n            <div>\n                <div>\n                    {\n                        this.props.sendingCompleted ?\n                            <div>\n                                Sending Password For {this.props.label}...\n                            </div>\n                            :\n                            <div>\n                                Sent Password for {this.props.label}!\n                            </div>\n                    }\n                </div>\n            </div>\n        );\n    }\n}\n\nclass NewLabelInput extends Component {\n    render() {\n        return (\n            <div>\n                Please enter a label for the password that will be generated.\n                <form>\n                    <div className=\"form-group\">\n                        <input type=\"text\" className=\"form-control\" aria-describedby=\"A label fof your password\" placeholder=\"Label\"/>\n                    </div>\n                    <button type=\"button\" className=\"btn btn-primary\">Generate Password For Label</button>\n                </form>\n            </div>\n        );\n    }\n}\n\nclass PasswordSelection extends Component {\n    render() {\n        return (\n            <div>\n                <SelectionBox labels={this.props.labels} value={this.props.labelSelected} onChange={this.props.onChange}/>\n                <div>\n                    <form>\n                        {\n                            this.props.labelSelected ? <button type=\"button\" className=\"btn btn-primary\" onClick={this.props.sendToKeyboard}>Send Password for {this.props.labelSelected} to Keyboard</button> : null\n                        }\n                    </form>\n                </div>\n            </div>\n        );\n    }\n}\n\nclass SelectionScreen extends Component {\n    CurrentState = {\n        SendingToKeyboard: \"SendingToKeyboard\",\n        SentToKeyboard: \"SentToKeyboard\",\n        DoingNothing: \"DoingNothing\",\n        labelSelected: null\n    };\n\n    state = {\n        currentState: this.CurrentState.DoingNothing\n    };\n\n    sendToKeyboard = () => {\n        this.setState({currentState: this.CurrentState.SendingToKeyboard});\n        request('/to-keyboard/' + this.state.labelSelected, (error, response, body) => {\n            console.log('error:', error); // Print the error if one occurred\n            console.log('statusCode:', response && response.statusCode); // Print the response status code if a response was received\n            console.log('body:', body); // Print the HTML for the Google homepage.\n            this.setState({currentState: this.CurrentState.SentToKeyboard});\n            setTimeout(() => {\n                this.setState({currentState: this.CurrentState.DoingNothing});\n            }, 3000)\n        });\n    };\n\n    handleLabelSelectedChange = (value) => {\n        this.setState({labelSelected: value});\n    };\n\n    render() {\n        return (\n            <div>\n                What password would you like to use?\n                <PasswordSelection labels={this.props.labels} sendToKeyboard={this.sendToKeyboard} labelSelected={this.state.labelSelected} onChange={this.handleLabelSelectedChange}/>\n                {\n                    this.state.currentState === this.state.SendingToKeyboard || this.state.currentState === this.state.SentToKeyboard ?\n                        <SendingPassword sendingCompleted={this.state.currentState === this.state.SentToKeyboard} label={this.state.labelSelected}/> :\n                        null\n                }\n                <br/>\n                <br/>\n                <button type=\"button\" onClick={this.handleGeneratePasswordClick} className=\"btn btn-primary\">Generate New Password</button>\n            </div>\n        );\n    }\n}\n\nclass App extends Component {\n    state = {\n        locked: false,\n        labels: []\n    };\n\n    updateLabels = () => {\n        request('http://localhost:5000/get-all-labels', (error, response, body) => {\n            console.log('error:', error); // Print the error if one occurred\n            console.log('statusCode:', response && response.statusCode); // Print the response status code if a response was received\n            console.log('body:', body); // Print the HTML for the Google homepage.\n            if (Array.isArray(JSON.parse(body))) {\n                this.setState({labels: JSON.parse(body)})\n            }\n        });\n    };\n\n    lockScreen = () => {\n        request('http://localhost:5000/lock', (error, response, body) => {\n            console.log('error:', error); // Print the error if one occurred\n            console.log('statusCode:', response && response.statusCode); // Print the response status code if a response was received\n            console.log('body:', body); // Print the HTML for the Google homepage.\n            this.setState({locked: true});\n        });\n    };\n\n    componentWillMount() {\n        this.updateLabels();\n    }\n\n    componentDidMount() {\n        this.updateLabels();\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <h1>Dragon Lock</h1>\n                    {this.state.locked ? <LockScreen/> : <SelectionScreen labels={this.state.labels}/>}\n                    <br/>\n                    {!this.state.locked ? <button type=\"button\" onClick={this.lockScreen} className=\"btn btn-danger\">Lock</button> : null}\n\n                </header>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}